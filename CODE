## Nouveau Schema Prisma avec des Commentaires:
// prisma/comment.model.prisma
model Comment {
  id        Int      @id @default(autoincrement())
  articleId Int
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Article   Article  @relation(fields: [articleId], references: [id])
  @@map("comments") // Nom de la table dans la base de données
  @@comment("Table contenant les commentaires des articles.")
}
## Objets de Mapping entre le Domaine et la Couche de Présentation:
Comment Entity:
// comments/comment.entity.ts
import { User } from "../users/user.entity";

export interface Comment {
    id: number;
    articleId: number;
    userId: number;
    content: string;
    createdAt: Date;
    updatedAt: Date;
}
## Comment Service:
// comments/comments.service.ts
import { Injectable } from "@nestjs/common";
import { PrismaService } from "../../infrastructure/prisma/prisma.service";
import { Comment } from "./comment.entity";

@Injectable()
export class CommentsService {
    constructor(private prisma: PrismaService) {}

    create = async (comment: Comment): Promise<Comment> => {
        return this.prisma.comment.create({
            data: { ...comment },
        });
    };

    findByArticleId = async (articleId: number): Promise<Comment[]> => {
        return this.prisma.comment.findMany({
            where: { articleId },
        });
    };
}
## Comment Controller:
// comments/comments.controller.ts
import { Controller, Post, Body, Param, Get } from "@nestjs/common";
import { CommentsService } from "./comments.service";
import { Comment } from "./comment.entity";

@Controller("articles/:articleId/comments")
export class CommentsController {
    constructor(private readonly commentsService: CommentsService) {}

    @Post()
    create(@Body() comment: Comment, @Param("articleId") articleId: number) {
        return this.commentsService.create({ ...comment, articleId });
    }

    @Get()
    findByArticleId(@Param("articleId") articleId: number) {
        return this.commentsService.findByArticleId(articleId);
    }
}
## Mise à jour du Module Articles:
// articles/articles.module.ts
import { Module } from "@nestjs/common";
import { ArticlesService } from "./articles.service";
import { PrismaModule } from "../../infrastructure/prisma/prisma.module";
import { NotificationsModule } from "../notifications/notifications.module";
import { CommentsModule } from "../comments/comments.module";

@Module({
    providers: [ArticlesService],
    imports: [PrismaModule, NotificationsModule, CommentsModule],
    exports: [ArticlesService],
})
## export class ArticlesModule {}
Module Commentaires:
// comments/comments.module.ts
import { Module } from "@nestjs/common";
import { CommentsService } from "./comments.service";
import { CommentsController } from "./comments.controller";

@Module({
    providers: [CommentsService],
    controllers: [CommentsController],
})
## export class CommentsModule {}
PrismaModule:
// infrastructure/prisma/prisma.module.ts
import { Module } from "@nestjs/common";
import { PrismaService } from "./prisma.service";

@Module({
    providers: [PrismaService],
    exports: [PrismaService],
})
export class PrismaModule {}
## PrismaService:
// infrastructure/prisma/prisma.service.ts
import { Injectable } from "@nestjs/common";
import { PrismaClient } from "@prisma/client";

@Injectable()
export class PrismaService extends PrismaClient {
    constructor() {
        super();
    }
}
